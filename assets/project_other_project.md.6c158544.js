import{_ as s,o as n,c as e,U as a}from"./chunks/framework.aa74df04.js";const t=JSON.parse('{"title":"工程化","description":"","frontmatter":{},"headers":[],"relativePath":"project/other/project.md","filePath":"project/other/project.md","lastUpdated":1691254132000}'),l={name:"project/other/project.md"},r=[a('<h1 id="工程化" tabindex="-1">工程化 <a class="header-anchor" href="#工程化" aria-label="Permalink to &quot;工程化&quot;">​</a></h1><p>具备<code>模块化</code>、<code>组件化</code>、<code>规范化</code>、<code>自动化</code>四大特性</p><h2 id="web-项目" tabindex="-1">Web 项目 <a class="header-anchor" href="#web-项目" aria-label="Permalink to &quot;Web 项目&quot;">​</a></h2><div class="language-md line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">project</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ dist # 输出目录</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ prod # 生产环境执行代码</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ └─ test # 测试环境执行代码</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ src # 源码目录</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ apis # 接口模块：包括全局接口请求的功能，控制数据定向转换</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ assets # 资源模块：包括样式、脚本、字体、图像、音频、视频等资源文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ components # 组件模块：包括全局通用的基础组件、皮肤主题和字体图标</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ layouts # 布局模块：包括以布局为最小粒度的组件集合，由至少一个基础组件组成</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ flows # 流程模块：包括以流程为最小粒度的组件集合，由至少一个基础组件组成</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ pages # 页面模块：包括以页面为最小粒度的组件集合，由至少一个基础组件组成</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ routes # 路由模块：包括全局页面跳转的功能，控制页面自由切换</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ stores # 数据模块：包括全局数据状态的功能，控制数据驱动视图</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ views # 视图模块：包括以视图为最小粒度的组件集合，由至少一个基础组件组成</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ utils # 工具模块：包括全局通用的常量与方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ index.html # 模板入口文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ index.js # 脚本入口文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ └─ index.scss # 样式入口文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="node-项目" tabindex="-1">Node 项目 <a class="header-anchor" href="#node-项目" aria-label="Permalink to &quot;Node 项目&quot;">​</a></h2><div class="language-md line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">project</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ dist # 输出目录</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ prod # 生产环境执行代码</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ └─ test # 测试环境执行代码</span></span>\n<span class="line"><span style="color:#A6ACCD;">├─ src # 源码目录</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ assets # 资源模块：包括样式、脚本、字体、图像、音频、视频等资源文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ models # 模型模块：包括全局数据模型的功能</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ routes # 路由模块：包括全局接口请求的功能</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ ├─ utils # 工具模块：包括全局通用的常量与方法</span></span>\n<span class="line"><span style="color:#A6ACCD;">│ └─ index.js # 脚本入口文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h2><ul><li>将设计图划分为最小组件层级</li><li>使用预设规范创建组件静态版本</li><li>确定组件内部最小且完整的状态的表示方式</li><li>确定组件内部最小且完整的状态的存放方式</li><li>实现数据流的正向传递与反向传递</li></ul><h2 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h2><p>常见<code>自动化</code>场景包括但不限于<code>自动化构建</code>、<code>自动化测试</code>、<code>自动化打包</code>、<code>自动化发布</code>和<code>自动化部署</code>，更高级的自动化场景包括但不限于<code>持续集成</code>、<code>持续交付</code>和<code>持续部署</code></p><h2 id="cjs与esm" tabindex="-1"><code>CJS</code>与<code>ESM</code> <a class="header-anchor" href="#cjs与esm" aria-label="Permalink to &quot;`CJS`与`ESM`&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">-</th><th style="text-align:center;">CJS</th><th style="text-align:center;">ESM</th></tr></thead><tbody><tr><td style="text-align:center;">语法类型</td><td style="text-align:center;">动态</td><td style="text-align:center;">静态</td></tr><tr><td style="text-align:center;">关键声明</td><td style="text-align:center;">require</td><td style="text-align:center;">export 与 import</td></tr><tr><td style="text-align:center;">加载方式</td><td style="text-align:center;">运行时加载</td><td style="text-align:center;">编译时加载</td></tr><tr><td style="text-align:center;">加载行为</td><td style="text-align:center;">同步加载</td><td style="text-align:center;">异步加载</td></tr><tr><td style="text-align:center;">书写位置</td><td style="text-align:center;">任何位置</td><td style="text-align:center;">顶层位置</td></tr><tr><td style="text-align:center;">指针指向</td><td style="text-align:center;">this 指向当前模块</td><td style="text-align:center;">this 指向 undefined</td></tr><tr><td style="text-align:center;">执行顺序</td><td style="text-align:center;">首次引用时加载模块,再次引用时读取缓存</td><td style="text-align:center;">引用时生成只读引用,执行时才是正式取值</td></tr><tr><td style="text-align:center;">属性引用</td><td style="text-align:center;">基本类型属于复制不共享,引用类型属于浅拷贝且共享</td><td style="text-align:center;">所有类型属于动态只读引用</td></tr><tr><td style="text-align:center;">属性改动</td><td style="text-align:center;">工作空间可修改引用的值</td><td style="text-align:center;">工作空间不可修改引用的值,但可通过引用的方法修改</td></tr></tbody></table>',12)];const p=s(l,[["render",function(s,a,t,l,p,c){return n(),e("div",null,r)}]]);export{t as __pageData,p as default};
