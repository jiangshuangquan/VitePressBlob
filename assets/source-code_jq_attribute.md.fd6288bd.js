import{_ as e,o as a,c as o,U as t}from"./chunks/framework.aa74df04.js";const l=JSON.parse('{"title":"获取新增删除","description":"","frontmatter":{},"headers":[],"relativePath":"source-code/jq/attribute.md","filePath":"source-code/jq/attribute.md","lastUpdated":1690697409000}'),s={name:"source-code/jq/attribute.md"},r=[t('<h1 id="获取新增删除" tabindex="-1">获取新增删除 <a class="header-anchor" href="#获取新增删除" aria-label="Permalink to &quot;获取新增删除&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>其中的原理都比较简单，但是 hooks 是一个比较有意思的处理方式</p><blockquote><p>hooks = jQuery.attrHooks[ name.toLowerCase() ];</p></blockquote><blockquote><p>hooks = jQuery.propHooks[ name ];</p></blockquote><blockquote><p>hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];</p></blockquote><p>当进行一个操作时，判断操作是否是 hooks 中的一个属性，这样既能外部做特殊处理，又能内部配置</p></div><h2 id="attr" tabindex="-1">attr <a class="header-anchor" href="#attr" aria-label="Permalink to &quot;attr&quot;">​</a></h2><blockquote><p>elem.nodeType 判断节点类型</p></blockquote><ul><li>1： 元素节点，是我们能操作的节点</li><li>其他节点</li></ul><blockquote><p>elem.getAttribute 判断是否有 getAttribute 属性， 没有就走</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">jQuery</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">prop</span><span style="color:#A6ACCD;">(elem</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><code>jQuery.removeAttr</code> 本质是 <code>elem.removeAttribute( name )</code></p></li><li><p><code>jQuery.attr</code> 本质是 <code>elem.setAttribute</code>、<code>elem.getAttribute</code></p></li></ul><h2 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;class&quot;">​</a></h2><p>毕竟是十年前的代码，这一段写的不太好</p><h2 id="prop" tabindex="-1">prop <a class="header-anchor" href="#prop" aria-label="Permalink to &quot;prop&quot;">​</a></h2><p>本质是 <code>elem[ name ]</code></p><h2 id="val" tabindex="-1">val <a class="header-anchor" href="#val" aria-label="Permalink to &quot;val&quot;">​</a></h2><p>本质是 <code>elem.value</code>、<code>elem.value = val</code></p>',14)];const c=e(s,[["render",function(e,t,l,s,c,p){return a(),o("div",null,r)}]]);export{l as __pageData,c as default};
