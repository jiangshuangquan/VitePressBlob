import{_ as a,o as e,c as o,U as s}from"./chunks/framework.aa74df04.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"essay/introduction/safety.md","filePath":"essay/introduction/safety.md","lastUpdated":1690127334000}'),n={name:"essay/introduction/safety.md"},t=[s('<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security" target="_blank" rel="noreferrer">web 安全 MDN</a></p><h2 id="常见的攻击手段" tabindex="-1">常见的攻击手段 <a class="header-anchor" href="#常见的攻击手段" aria-label="Permalink to &quot;常见的攻击手段&quot;">​</a></h2><h3 id="_1-任意文件上传" tabindex="-1">1. 任意文件上传 <a class="header-anchor" href="#_1-任意文件上传" aria-label="Permalink to &quot;1. 任意文件上传&quot;">​</a></h3><p>将恶意文件上传到服务器中并执行，从而攻击系统。攻击包括：文件系统或者数据库超载、完全接管系统、将攻击转发到后端系统或者简单的破坏。</p><h3 id="_2-点击劫持" tabindex="-1">2. 点击劫持 <a class="header-anchor" href="#_2-点击劫持" aria-label="Permalink to &quot;2. 点击劫持&quot;">​</a></h3><p>在用户观看到的网站上覆盖一层透明的恶意网站，诱导用户点击恶意网站上的按钮来触发攻击行为</p><h3 id="_3-xss-攻击" tabindex="-1">3. XSS 攻击 <a class="header-anchor" href="#_3-xss-攻击" aria-label="Permalink to &quot;3. XSS 攻击&quot;">​</a></h3><p>将恶意脚本 JS 脚本注入到网页中的攻击方式。网站上的缺陷使这些攻击得以成功并广泛传播</p><h3 id="_4-sql-注入" tabindex="-1">4. SQL 注入 <a class="header-anchor" href="#_4-sql-注入" aria-label="Permalink to &quot;4. SQL 注入&quot;">​</a></h3><p>将恶意的 SQL 注入到数据库</p><h3 id="_5-dos-攻击-拒绝服务" tabindex="-1">5. Dos 攻击（拒绝服务） <a class="header-anchor" href="#_5-dos-攻击-拒绝服务" aria-label="Permalink to &quot;5. Dos 攻击（拒绝服务）&quot;">​</a></h3><p>通过流量轰炸服务器，导致正常的用户无法正常访问服务器</p><h3 id="_6-中间人攻击或者会话劫持" tabindex="-1">6. 中间人攻击或者会话劫持 <a class="header-anchor" href="#_6-中间人攻击或者会话劫持" aria-label="Permalink to &quot;6. 中间人攻击或者会话劫持&quot;">​</a></h3><p>拦截客户端和服务端之间的通信，从中窃取用户的密码、账号或者任何个人详细信息</p><h2 id="防范手段" tabindex="-1">防范手段 <a class="header-anchor" href="#防范手段" aria-label="Permalink to &quot;防范手段&quot;">​</a></h2><h3 id="_1-严格的限制用户的输入-第一个攻击点" tabindex="-1">1. 严格的限制用户的输入（第一个攻击点） <a class="header-anchor" href="#_1-严格的限制用户的输入-第一个攻击点" aria-label="Permalink to &quot;1. 严格的限制用户的输入（第一个攻击点）&quot;">​</a></h3><ul><li><a href="https://www.npmjs.com/package/dompurify" target="_blank" rel="noreferrer">DOMPurify</a>.仅仅使用一个函数就可以过滤用户的输入。同时，也支持自定义的规则，并且支持在 HTML5、SVG、MathML 中使用。</li><li><a href="https://www.npmjs.com/package/secure-filters" target="_blank" rel="noreferrer">secure-filters</a>. 它提供方法去过滤 HTML、JavaScript、内联 CSS 等等。当你想利用用户的输入生成 JavaScript 或者 CSS 时，这个库特别好用。</li></ul><p>文件上传，请务必检查文件类型并且使用文件过滤功能仅允许某些文件类型上传。</p><h3 id="_2-注意隐藏保存浏览器内存中的数据或字段" tabindex="-1">2.注意隐藏保存浏览器内存中的数据或字段 <a class="header-anchor" href="#_2-注意隐藏保存浏览器内存中的数据或字段" aria-label="Permalink to &quot;2.注意隐藏保存浏览器内存中的数据或字段&quot;">​</a></h3><h3 id="_3-使用-csp" tabindex="-1">3. 使用 CSP <a class="header-anchor" href="#_3-使用-csp" aria-label="Permalink to &quot;3. 使用 CSP&quot;">​</a></h3><div class="language-less line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// header</span></span>\n<span class="line"><span style="color:#FFCB6B;">content-security-policy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">script-src</span><span style="color:#A6ACCD;"> ‘self’ https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//apis.xyz.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>仅仅信任<a href="https://apis.xyz.xn--com-t33esws3nnp6aca5646akewo96a" target="_blank" rel="noreferrer">https://apis.xyz.com和本身域名的脚本</a></p><p>可以在 MDN 网站上阅读更详细 CSP 说明</p><h3 id="_4-开启-xss-保护模式" tabindex="-1">4. 开启 XSS 保护模式 <a class="header-anchor" href="#_4-开启-xss-保护模式" aria-label="Permalink to &quot;4. 开启 XSS 保护模式&quot;">​</a></h3><p>如果攻击者通过某种方式在用户输入中插入攻击代码，我们可以通过<code>&quot;X-XSS-Protection&quot;: &quot;1; mode=block&quot;</code>来告诉浏览器阻止响应。 大多数现代浏览器默认情况下都启用了 XSS 保护模式，但仍建议添加 <code>X-XSS-Protection</code>。 这有助于提高不支持 CSP 的旧版浏览器的安全性。</p><h3 id="_5-避免典型的-xss-错误" tabindex="-1">5. 避免典型的 XSS 错误 <a class="header-anchor" href="#_5-避免典型的-xss-错误" aria-label="Permalink to &quot;5. 避免典型的 XSS 错误&quot;">​</a></h3><p>考虑使用<code>textContent</code>来代替<code>innerHTML</code>，避免直接生成 HTML。如果你不生成 HTML，那就不会有 JavaScript 插入到页面</p><h3 id="_6-禁用-iframe-嵌入" tabindex="-1">6. 禁用 IFrame 嵌入 <a class="header-anchor" href="#_6-禁用-iframe-嵌入" aria-label="Permalink to &quot;6. 禁用 IFrame 嵌入&quot;">​</a></h3><p>禁用 iframe 可以帮助我们免受点击劫持攻击。我们应该在 header 中添加<code>&quot;X-Frame-Options&quot;: &quot;DENY&quot;</code>，来禁止浏览器在页面中渲染 iframe。</p><p>我们也可以使用 CSP 指令<code>frame-ancestors</code>，它可以更好的控制我们的页面可以被哪些父页面通过 iframe 的形式来嵌套展示。</p><h3 id="_7-通用的错误提示" tabindex="-1">7. 通用的错误提示 <a class="header-anchor" href="#_7-通用的错误提示" aria-label="Permalink to &quot;7. 通用的错误提示&quot;">​</a></h3><p>类似&quot;您的密码有误&quot;这样的提示对用户很友好，同时，他对攻击者也很友好。他们可以通过服务端返回的错误信息来判断他下一步需要进行什么样的攻击。</p><p>当处理用户的账号、邮件、个人信息时，我们应该尝试使用一些模棱两可的错误提示，类似“错误的登陆信息”。</p><h3 id="_8-使用验证码" tabindex="-1">8. 使用验证码 <a class="header-anchor" href="#_8-使用验证码" aria-label="Permalink to &quot;8. 使用验证码&quot;">​</a></h3><p>在对外的公共服务（登陆、注册）上使用验证码。验证码的目的在于帮助我们区分真人和机器人，并且也可以阻止 DoS 攻击。</p><h3 id="_9-设置-referrer-policy" tabindex="-1">9. 设置 Referrer-Policy <a class="header-anchor" href="#_9-设置-referrer-policy" aria-label="Permalink to &quot;9. 设置 Referrer-Policy&quot;">​</a></h3><p>当我们使用<code>&lt;a&gt;</code>标签或者超链接引导用户离开我们的网站时，确保你在请求 header 里面添加了<code>&quot;Referrer-Policy&quot;: &quot;no-referrer&quot;</code>，或者在<code>&lt;a&gt;</code>标签中添加了<code>rel=&quot;noopener&quot;</code> 或<code>rel=&quot;noreferrer&quot;</code>属性。</p><p>当我们不设置<code>header</code>或者<code>rel</code>属性时，目标网站就可以获取到一些用户相关的数据。</p><p><code>rel=noopener</code>保证跳转过去的网站无法通过<code>window.opener</code>窃取原来网页的信息。<code>rel=noreferrer</code>作用是防止将引用者信息传递到目标网站。上面提到的策略大家可以去 mdn 上了解一下 <code>MDN Referrer-Policy</code>、<code>MDN Link Type</code></p><h3 id="_10-限制浏览器的功能或者-api" tabindex="-1">10. 限制浏览器的功能或者 API <a class="header-anchor" href="#_10-限制浏览器的功能或者-api" aria-label="Permalink to &quot;10. 限制浏览器的功能或者 API&quot;">​</a></h3><p>我们可以利用 http header 中的<code>Feature-Policy</code>字段来限制使用浏览器提供的功能。</p><h3 id="_11-定期审查-npm-依赖" tabindex="-1">11. 定期审查 npm 依赖 <a class="header-anchor" href="#_11-定期审查-npm-依赖" aria-label="Permalink to &quot;11. 定期审查 npm 依赖&quot;">​</a></h3><p>经常跑一下<code>npm audit</code>来获取存在漏洞的<code>npm</code>包列表，升级他们避免一些安全问题。</p><p>GitHub 现在会标记出哪些存在漏洞的依赖。我们也可以使用<code>Snyk</code>来自动检查你的源码，并且自动升级版本号。</p><h3 id="_12-分离你的应用" tabindex="-1">12. 分离你的应用 <a class="header-anchor" href="#_12-分离你的应用" aria-label="Permalink to &quot;12. 分离你的应用&quot;">​</a></h3><p>与后端一样，我们也拥有微服务架构，其中，将单一的 Web 应用转变为多个小型前端应用的聚合，每个小型前端应用可以单独运行。</p><h3 id="_13-尽量避免使用第三方服务" tabindex="-1">13. 尽量避免使用第三方服务 <a class="header-anchor" href="#_13-尽量避免使用第三方服务" aria-label="Permalink to &quot;13. 尽量避免使用第三方服务&quot;">​</a></h3><p>拥有一套健全的 CSP 策略很重要。大多数第三方服务都有定义的 CSP 指令，因此请务必添加它们。</p><p>同样，如果可能的话，请确保给你的<code>script</code>标签都加上<code>integrity</code>属性。子资源完整性功能<code>（SRI）</code>可以验证脚本的<code>hash</code>值，并确保其未被篡改。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://example.com/example-framework.js</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">integrity</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/ux...</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">crossorigin</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">anonymous</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>将使用<code>base64</code>编码过后的文件哈希值写入你所引用的 <code>&lt;script&gt; </code>或 <code>&lt;link&gt;</code> 标签的 <code>integrity</code> 属性值中即可启用子资源完整性校验功能。</p><h3 id="_14-仔细考虑自动填充字段" tabindex="-1">14.仔细考虑自动填充字段 <a class="header-anchor" href="#_14-仔细考虑自动填充字段" aria-label="Permalink to &quot;14.仔细考虑自动填充字段&quot;">​</a></h3><p>存储在浏览器的自动填充里面的用户个人数据对用户和攻击者都很方便。</p><p>攻击者添加了第三方的脚本，利用浏览器的自动填充来提取用户的邮箱地址去构建追踪标识。他们可以使用这些信息建立用户浏览历史记录配置文件，然后将其出售给坏人。</p><p>我们许多人甚至都不知道他们的浏览器自动填充功能存储了哪些信息。</p><p>提示：禁止将敏感信息自动填入表单</p><p>MDN 中也有一个 web 安全相关的专题，大家有兴趣可以关注一下 MDN web security</p>',57)];const l=a(n,[["render",function(a,s,r,n,l,p){return e(),o("div",null,t)}]]);export{r as __pageData,l as default};
